service: higaidar

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${env:STAGE, "dev"}
  region: ap-northeast-1
  profile: ${self:service}-${self:provider.stage}-deploy
  iamRoleStatements:
    - Effect: Allow
      Action:
        - rds-db:connect
      Resource:
        - "arn:aws:rds-db:${self:provider.region}:*:dbuser:${self:custom.rds.DBI_RESOURCE_ID}/lambda"
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:PutObjectACL
      Resource:
        - "arn:aws:s3:::${self:provider.environment.RESOURCE_PREFIX}photos/*"
  environment:
    STAGE: ${self:provider.stage}
    RESOURCE_PREFIX: ${self:service}-${self:provider.stage}-
    AWS_RDS_REGION: ${self:provider.region}
    AWS_RDS_HOST: ${self:custom.rds.HOST}
    AWS_RDS_PORT: ${self:custom.rds.PORT}
    AWS_RDS_USERNAME: ${self:custom.rds.USERNAME}
    AWS_RDS_DATABASE: ${self:custom.rds.DATABASE}
    JWT_SECRET: ${self:custom.env.JWT_SECRET}
    JWT_EXPIRES_IN: ${self:custom.env.JWT_EXPIRES_IN}

custom:
  env: ${file(../.env.${self:provider.stage}.yml)}
  rds: ${file(../.rake/rds/${self:service}-${self:provider.stage}/vars.yml)}

package:
  exclude:
    - .git/**
    - tmp/**
    - test/**
    - node_modules/.bin/**
    - node_modules/aws-sdk/**

functions:
  authorize:
    handler: app/token/handler.authorize
    
  token-create:
    handler: app/token/handler.create
    events:
      - http:
          path: token
          method: post
          cors: true

  users-index:
    handler: app/users/handler.index
    events:
      - http:
          path: users
          method: get
          cors: true
          authorizer: authorize

  users-create:
    handler: app/users/handler.create
    events:
      - http:
          path: users
          method: post
          cors: true
          authorizer: authorize

  users-show:
    handler: app/users/handler.show
    events:
      - http:
          path: users/{id}
          method: get
          cors: true
          authorizer: authorize

  users-update:
    handler: app/users/handler.update
    events:
      - http:
          path: users/{id}
          method: patch
          cors: true
          authorizer: authorize

  users-destroy:
    handler: app/users/handler.destroy
    events:
      - http:
          path: users/{id}
          method: delete
          cors: true
          authorizer: authorize

  my-photos-index:
    handler: app/my/photos/handler.index
    events:
      - http:
          path: my/photos
          method: get
          cors: true
          authorizer: authorize

  my-photos-create:
    handler: app/my/photos/handler.create
    events:
      - http:
          path: my/photos
          method: post
          cors: true
          authorizer: authorize

  my-photos-show:
    handler: app/my/photos/handler.show
    events:
      - http:
          path: my/photos/{id}
          method: get
          cors: true
          authorizer: authorize

  my-photos-update:
    handler: app/my/photos/handler.update
    events:
      - http:
          path: my/photos/{id}
          method: patch
          cors: true
          authorizer: authorize

  my-photos-destroy:
    handler: app/my/photos/handler.destroy
    events:
      - http:
          path: my/photos/{id}
          method: delete
          cors: true
          authorizer: authorize

resources:
  Resources:
    S3BucketPhotos:
      Type: "AWS::S3::Bucket"
      # DeletionPolicy: Retain
      Properties:
        BucketName: ${self:provider.environment.RESOURCE_PREFIX}photos
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - HEAD
              AllowedOrigins:
                - "*"
